"""
Templates for AGENTS.md files.
"""

TEMPLATES = {
    "root": """# AGENTS.md - {project_name}

This project is enhanced with MyAI agents for comprehensive development support.

## Available AI Agents

<!-- MYAI:AGENTS:START -->
{agent_sections}
<!-- MYAI:AGENTS:END -->

## Project Guidelines

### Development Environment
- Install dependencies: `{install_command}`
- Development server: `{dev_command}`
- Build project: `{build_command}`

### Code Standards
- Follow the style guide in `/docs/style-guide.md`
- Use type hints for all function signatures
- Write descriptive commit messages

### Testing Requirements
- Run tests: `{test_command}`
- Maintain test coverage above 80%
- Write tests for all new features

### Security Policies
- Never commit sensitive data
- Use environment variables for secrets
- Follow OWASP guidelines

## Getting Started

1. Clone the repository
2. Install dependencies: `{install_command}`
3. Run tests: `{test_command}`
4. Start development: `{dev_command}`

## Working with MyAI Agents

The agents referenced above are available through MyAI. They understand:
- Project structure and conventions
- Testing requirements and patterns
- Security policies and best practices
- Code style and quality standards

To see all available agents: `myai agent list`
To enable more agents: `myai agent enable <agent-name>`

---
Generated by MyAI - Automatically maintained when agents are enabled/disabled
""",
    "api": """# AGENTS.md - API Module

This directory contains the REST API implementation.

## API-Specific Guidelines

### Design Principles
- RESTful architecture
- Consistent error handling with standard HTTP codes
- Comprehensive request/response validation
- API versioning through URL path (e.g., /v1/, /v2/)

### Endpoints
- Follow REST naming conventions (nouns, not verbs)
- Use proper HTTP methods (GET, POST, PUT, DELETE)
- Document all parameters and responses
- Include example requests in docstrings

### Request/Response Format
- JSON for request/response bodies
- Use camelCase for field names
- Include timestamps in ISO 8601 format
- Wrap responses in standard envelope

### Error Handling
```json
{
  "error": {
    "code": "VALIDATION_ERROR",
    "message": "Invalid input provided",
    "details": [...]
  }
}
```

### Testing
- Unit tests for each endpoint
- Integration test suites for workflows
- Performance benchmarks for critical paths
- Mock external dependencies

### Documentation
- OpenAPI/Swagger specification required
- Example requests and responses
- Error code reference
- Authentication details

### Security
- Authenticate all endpoints (except public ones)
- Validate and sanitize all inputs
- Rate limiting on all endpoints
- CORS configuration as needed

---
Refer to parent AGENTS.md for project-wide guidelines.
""",
    "frontend": """# AGENTS.md - Frontend Module

This directory contains the frontend application.

## Frontend Guidelines

### Component Architecture
- Functional components with hooks
- Reusable components in shared directory
- Clear prop interfaces with TypeScript
- Proper state management (Context/Redux)

### Directory Structure
```
frontend/
├── components/     # Reusable components
├── pages/         # Page components
├── hooks/         # Custom hooks
├── utils/         # Utility functions
├── services/      # API service layer
└── styles/        # Global styles
```

### Styling
- CSS modules for component styles
- Consistent design system tokens
- Mobile-first responsive design
- Accessibility (WCAG 2.1 AA)

### Performance
- Code splitting by route
- Lazy loading for heavy components
- Image optimization
- Bundle size monitoring

### Testing
- Unit tests for components
- Integration tests for user flows
- Visual regression tests
- Accessibility tests

### Development Workflow
- Hot module replacement enabled
- ESLint and Prettier configured
- Pre-commit hooks for quality
- Storybook for component development

---
Refer to parent AGENTS.md for project-wide guidelines.
""",
    "tests": """# AGENTS.md - Tests Directory

This directory contains all test suites for the project.

## Testing Guidelines

### Test Organization
```
tests/
├── unit/          # Unit tests
├── integration/   # Integration tests
├── e2e/          # End-to-end tests
└── fixtures/     # Test data and mocks
```

### Writing Tests
- Descriptive test names that explain the scenario
- Arrange-Act-Assert pattern
- One assertion per test when possible
- Use fixtures for test data

### Test Coverage
- Minimum 80% code coverage
- 100% coverage for critical paths
- Coverage reports in CI/CD pipeline

### Running Tests
- All tests: `{test_command}`
- Unit tests only: `{test_command} unit`
- With coverage: `{test_command} --coverage`
- Watch mode: `{test_command} --watch`

### Best Practices
- Mock external dependencies
- Use factories for test data
- Clean up after tests
- Avoid testing implementation details

### Performance Tests
- Load testing for APIs
- Frontend performance metrics
- Database query optimization
- Memory leak detection

---
Refer to parent AGENTS.md for project-wide guidelines.
""",
    "docs": """# AGENTS.md - Documentation

This directory contains project documentation.

## Documentation Guidelines

### Structure
```
docs/
├── api/           # API documentation
├── guides/        # User guides
├── architecture/  # System design docs
└── decisions/     # ADRs
```

### Writing Style
- Clear and concise
- Use active voice
- Include examples
- Keep it up-to-date

### Documentation Types
- README files for quick start
- API documentation (OpenAPI)
- Architecture diagrams
- Decision records (ADRs)
- User guides
- Developer guides

### Maintenance
- Review with code changes
- Version with the code
- Link from relevant code
- Regular audit schedule

---
Refer to parent AGENTS.md for project-wide guidelines.
""",
}
